{"version":3,"sources":["Pages/Playlist/index.js","App.js","serviceWorker.js","index.js"],"names":["Playlist","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getPlaylist","_this$state","state","token","playlistId","fetch","concat","method","headers","Authorization","then","res","json","response","console","log","setState","tracks","items","catch","error","deleteTrack","e","id","target","index","value","_this$state2","body","JSON","stringify","uri","positions","parseInt","item","match","filter","params","_this2","_this$state3","react_default","a","createElement","name","src","images","url","height","map","track","idx","key","v4","artists","onClick","Component","PlaylistItems","styled","div","_templateObject","PlaylistItem","_templateObject2","PlaylistTitle","_templateObject3","Home","_ref","length","owner","display_name","i","react_router_dom","to","App","getPlaylists","loggedIn","getHashParams","access_token","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","href","react_router","exact","path","component","App_Home","Pages_Playlist","assign","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9df628b9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport v4 from \"uuid\";\n\nclass Playlist extends Component {\n  constructor(props) {\n    super();\n    const { items, match, token } = props;\n    let item;\n    item = items.filter(item => match.params.playlistId === item.id)[0];\n    this.state = {\n      tracks: null,\n      playlistId: match.params.playlistId,\n      item,\n      token\n    };\n  }\n  componentDidMount() {\n    this.getPlaylist();\n  }\n  getPlaylist = () => {\n    const { token, playlistId } = this.state;\n    fetch(`https://api.spotify.com/v1/playlists/${playlistId}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(res => res.json())\n      .then(response => {\n        console.log(response);\n        this.setState({\n          tracks: response.tracks.items\n        });\n      })\n      .catch(error => console.error(\"Error:\", error));\n  };\n\n  deleteTrack = e => {\n    let id = e.target.id;\n    let index = e.target.value;\n    const { token, playlistId } = this.state;\n    fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        tracks: [\n          {\n            uri: `spotify:track:${id}`,\n            positions: [parseInt(index)]\n          }\n        ]\n      })\n    })\n      .then(res => res.json())\n      .then(response => {\n        this.getPlaylist();\n      })\n      .catch(error => console.error(\"Error:\", error));\n  };\n\n  render() {\n    const { item, tracks } = this.state;\n    return (\n      <div>\n        {item && (\n          <div>\n            <h1>{item.name}</h1>\n            <img src={item.images[0].url} height=\"200\" />\n            <ul>\n              {tracks &&\n                tracks.map((track, idx) => (\n                  <li key={v4()}>\n                    {track.track.name} - {track.track.artists[0].name}\n                    <button\n                      id={track.track.id}\n                      value={idx}\n                      onClick={this.deleteTrack}\n                    >\n                      -\n                    </button>\n                  </li>\n                ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport v4 from \"uuid\";\nimport styled from \"styled-components\";\nimport Playlist from \"./Pages/Playlist\";\nimport \"./App.css\";\n\nconst PlaylistItems = styled.div`\n  background: transparent;\n  border-radius: 3px;\n  color: white;\n  padding: 1em 2em;\n`;\n\nconst PlaylistItem = styled.div`\n  border-bottom: 1px solid #404040;\n  display: flex;\n  padding: 10px;\n  :hover {\n    background-color: rgba(0, 0, 0, 0.3);\n  }\n`;\n\nconst PlaylistTitle = styled.div`\n  display: flex;\n  margin: auto;\n  width: 80%;\n  a {\n    width: 100%;\n    line-height: 100px;\n    height: 100px;\n  }\n`;\n\nconst Home = ({ items }) => {\n  return (\n    <PlaylistItems>\n      {items.length > 0 && <h1> {items[0].owner.display_name}'s Playlists </h1>}\n      {items.map((item, i) => (\n        <PlaylistItem key={v4()}>\n          <img src={item.images[0].url} height=\"100\" />\n          <PlaylistTitle>\n            <Link to={`/playlist/${item.id}`}>{item.name}</Link>\n          </PlaylistTitle>\n        </PlaylistItem>\n      ))}\n    </PlaylistItems>\n  );\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      token: null,\n      loggedIn: false,\n      items: []\n    };\n  }\n  componentDidMount() {\n    // Set token\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      // Set token\n      this.setState({\n        token,\n        loggedIn: true\n      });\n      this.getPlaylists(token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n  getPlaylists = token => {\n    fetch(\"https://api.spotify.com/v1/me/playlists\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(res => res.json())\n      .then(response => {\n        console.log(response);\n        this.setState({\n          items: response.items\n        });\n      })\n      .catch(error => console.error(\"Error:\", error));\n  };\n  render() {\n    const { items, loggedIn, token } = this.state;\n    return (\n      <Router>\n        <div>\n          {!loggedIn && <a href=\"http://localhost:8888\"> Login to Spotify </a>}\n          <Route exact path=\"/\" component={() => <Home items={items} />} />\n          <Route\n            path={\"/playlist/:playlistId\"}\n            component={props => (\n              <Playlist {...props} items={items} token={token} />\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}